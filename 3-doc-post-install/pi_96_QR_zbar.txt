sudo apt-get install libzbar0
sudo apt-get install libzbar-dev python-zbar zbar-tools

sudo apt-get install python3-pip
sudo pip3  install pyzbar

-------------------------------------------------------------------------------
test.sh
(update PC IP)

#!/bin/bash
sudo killall raspivid gst-launch-1.0 test-launch test
raspivid -t 0 -w 640 -h 480 -fps 30/1 -b 3000000 -g 5 -vf -hf -cd H264 -n -fl -ih -o -  \
  | gst-launch-1.0 fdsrc  \
  ! h264parse  \
  ! rtph264pay pt=96 config-interval=1 \
  ! tee name=streams \
  ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=0 \
  ! udpsink host=192.168.3.1 port=5100 streams. \
  ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=0 \
  ! udpsink host=127.0.0.1 port=5200  &
sleep 1
#/home/pi/Projects/opencv_test/test.py &
/home/pi/Projects/opencv_test/test &

-------------------------------------------------------------------------------
Client

gst-launch-1.0 udpsrc port=5100 ! application/x-rtp, encoding-name=H264,payload=96 ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! autovideosink sync=false
gst-launch-1.0 udpsrc port=5500 ! application/x-rtp, encoding-name=H264,payload=96 ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! autovideosink sync=false

-------------------------------------------------------------------------------
test.cpp

/*
g++ -g ./test.cpp -o test `pkg-config --cflags --libs opencv4` -lzbar
*/
#include <opencv2/opencv.hpp>
#include <zbar.h>

#define WIDTH 640
#define HEIGHT 480
#define FPS 30
#define SCALE 3/2

using namespace cv;
using namespace std;
using namespace zbar;

typedef struct
{
  string type;
  string data;
  vector <Point> location;
} decodedObject;

int main(int, char**)
{
  int cpt=0;
  Mat data;
  string streamInGstStr="udpsrc port=5200 ! application/x-rtp,ncoding-name=H264,payload=96 ! rtph264depay ! h264parse ! v4l2h264dec capture-io-mode=4 ! v4l2convert output-io-mode=5 ! appsink";
  string streamOutGstStr="appsrc ! videoconvert ! omxh264enc ! video/x-h264,profile=high ! rtph264pay pt=96 config-interval=1 ! udpsink host=192.168.3.1 port=5500";

  VideoCapture streamIn(streamInGstStr,CAP_GSTREAMER);
  VideoWriter  streamOut(streamOutGstStr,0,FPS/1,Size(WIDTH,HEIGHT),true);

  vector<decodedObject> decodedObjects;
  ImageScanner scanner;
  scanner.set_config(ZBAR_NONE, ZBAR_CFG_ENABLE, 0);
  scanner.set_config(ZBAR_QRCODE, ZBAR_CFG_ENABLE, 1);
  Mat imGray;
  if (streamIn.isOpened() && streamOut.isOpened()) {
    while (true) {
      streamIn.read(data);
      if (!data.empty()) {
        cvtColor(data, imGray,COLOR_BGR2GRAY);
        Image image(data.cols, data.rows, "Y800", (uchar *)imGray.data, data.cols * data.rows);
        int n = scanner.scan(image);
        for(Image::SymbolIterator symbol = image.symbol_begin(); symbol != image.symbol_end(); ++symbol)
        {
          decodedObject obj;
          obj.type = symbol->get_type_name();
          obj.data = symbol->get_data();
          cout << "Type : " << obj.type << endl;
          cout << "Data : " << obj.data << endl << endl;
          for(int i = 0; i< symbol->get_location_size(); i++) 
            obj.location.push_back(Point(symbol->get_location_x(i),symbol->get_location_y(i)));
          decodedObjects.push_back(obj);
        }
        for(int i = 0; i < decodedObjects.size(); i++)
        {
          vector<Point> points = decodedObjects[i].location;
          vector<Point> hull;
          if(points.size() > 4) convexHull(points, hull);
          else hull = points;
          int n = hull.size();
          for(int j = 0; j < n; j++) line(data, hull[j], hull[ (j+1) % n], Scalar(255,0,0), 3);
        }
       	printf("%d\n",cpt++);
        streamOut.write(data);
      }
    }
  }
  return 0;
}


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
sudo apt-get install libzbar0
sudo apt-get install libzbar-dev python-zbar zbar-tools


sudo apt-get install python3-pip
sudo pip3  install pyzbar
